{% set version = "4.0" %}
{% set build = 1 %}
{% set netmod = netmod or 'default' %}
{% set netmod_variant = netmod.split('-')[0] %}
{% set netmod_version = netmod.split('-')[1] if '-' in netmod else '' %}

package:
  name: mvapich
  version: {{ version }}

source:
  url: https://mvapich.cse.ohio-state.edu/download/mvapich/mv2/mvapich-{{ version }}.tar.gz
  sha256: c532f7bdd5cca71f78c12e0885c492f6e276e283711806c84d0b0f80bb3e3b74

build:
  number: {{ build }}
  string: {{ netmod_variant }}_{{ netmod_version|replace('-','_') }}_h{{ PKG_HASH }}_{{ build }}
  skip: true  # [win or osx]
  run_exports:
    - {{ pin_subpackage('mvapich', max_pin='x.y') }}

requirements:
  build:
    - bison
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('fortran') }}
    - {{ stdlib("c") }}
    - make
  host:
    - libhwloc
    {% if netmod_variant == "ofi" and netmod_version %}
    - libfabric {{ netmod_version }}
    {% elif netmod_variant == "ucx" %}
    - ucx >=1.12.0
    {% endif %}
  run:
    {% if netmod_variant == "ofi" and netmod_version %}
    - libfabric {{ netmod_version }}
    {% elif netmod_variant == "ucx" %}
    - ucx >=1.12.0
    {% endif %}
    - rdma-core
    - mpi 1.0.* mvapich

test:
  requires:
    - {{ compiler('c') }}

  commands:
{% if target_platform == "linux-64" %}
    - mpiexec -n 2 $PREFIX/libexec/osu-micro-benchmarks/mpi/pt2pt/osu_latency -m 1024:1024
{% else %}
    - echo "Skipping linux-aarch64 & linux-ppc64le tests for now"
{% endif %}

about:
  home: https://mvapich.cse.ohio-state.edu/
  license: BSD-3-Clause
  license_family: BSD
  license_file: COPYRIGHT
  summary: MVAPICH, a high-performance MPI library by The Ohio State University.
  description: |
    MVAPICH is a high-performance implementation of the MPI (Message Passing Interface) standard.
    It provides enhancements including optimization for different networking technologies.

    ### Important Configuration
    The default value for `MV2_ENABLE_AFFINITY` is typically `1` (enabled). This setting binds MPI processes
    to specific CPU cores to improve performance due to cache locality and reduced context switching.
    In some environments, particularly those using the Slurm job scheduler, this may degrade performance
    or lead to unexpected behavior, and hence it may be beneficial to set `MV2_ENABLE_AFFINITY=0`.

    ### Selecting Netmods: OFI (external) or UCX
    MVAPICH supports two high-level network modules (netmods), namely UCX and OFI:
    for the UCX netmod use `conda install conda-forge::mvapich=*=ucx*`, and
    for the OFI netmod `conda install conda-forge::mvapich=*=ofi*`. 
    As an *experiment* it is also possible to select a particular version of LibFabric or UCX, 
    for instance 1.15.2 with `conda install conda-forge::mvapich=*=ofi_1.15.2*`.

    These commands will install the MVAPICH package configured with the desired netmod.

    ### About the Compilers
    Note that the actual GNU compilers (i.e., `gcc_linux-64`, `gfortran_linux-64` and `gxx_linux-64` for `linux-64`, or
    their equivalent for other platforms) have to be added manually since they are not automatically installed in the Conda
    environment as dependencies.

extra:
  recipe-maintainers:
    - j34ni
