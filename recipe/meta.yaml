{% set version_mvapich = "3.0" %}
{% set version_libfabric = "1.22.0" %}
{% set build = 3 %}

package:
  name: mvapich
  version: {{ version_mvapich }}

source:
  - url: https://mvapich.cse.ohio-state.edu/download/mvapich/mv2/mvapich-{{ version_mvapich }}.tar.gz
    sha256: ee076c4e672d18d6bf8dd2250e4a91fa96aac1db2c788e4572b5513d86936efb
    folder: mvapich_source
  - url: https://github.com/ofiwg/libfabric/archive/refs/tags/v{{ version_libfabric }}.tar.gz
    sha256: 302bf1a3ef64bf51a41a1882f87277a7ab259c8790600e30cf78eee25dfa63dd
    folder: libfabric_source

build:
  number: {{ build }}
  string: "{{ netmod }}_h{{ PKG_HASH }}_{{ build }}"
  skip: true  # [win or osx]
  {% if netmod == "ofi" %}
  skip: false  # [arm64]
  {% endif %}
  run_exports:
    - {{ pin_subpackage('mvapich', max_pin='x.y') }}

requirements:
  build:
    - gnuconfig  # [unix]
    - bison
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('fortran') }}
    - {{ stdlib("c") }}
    - autoconf
    - automake
    - libtool 
    - make
    - pkg-config
  host:
    - libhwloc
    {% if netmod == "ucx" %}
    - ucx >=1.12.0
    {% endif %}
  run:
    - mpi 1.0.* mvapich

test:
  requires:
    - {{ compiler('c') }}

  commands:
{% if target_platform == "linux-64" %}
    - mpiexec -n 2 $PREFIX/libexec/osu-micro-benchmarks/mpi/pt2pt/osu_latency -m 1024:1024
{% else %}
    - echo "Skipping linux-aarch64 & linux-ppc64le tests for now"
{% endif %}

about:
  home: https://mvapich.cse.ohio-state.edu/
  license: BSD-3-Clause AND BSD-2-Clause OR GPL-2.0-only
  license_family: BSD
  license_file: 
    - COPYRIGHT  # For mvapich
    - COPYING  # For libfabric
  summary: MVAPICH, a high-performance MPI library by The Ohio State University.
  description: |
    MVAPICH is a high-performance implementation of the MPI (Message Passing Interface) standard.
    It provides enhancements including optimization for different networking technologies.

    ### Important Configuration
    The default value for `MV2_ENABLE_AFFINITY` is typically `1` (enabled). This setting binds MPI processes
    to specific CPU cores to improve performance due to cache locality and reduced context switching.
    In some environments, particularly those using the Slurm job scheduler, this may degrade performance
    or lead to unexpected behavior, and hence it may be beneficial to set `MV2_ENABLE_AFFINITY=0`.

    ### Selecting Netmods: OFI or UCX
    MVAPICH supports two high-level network modules (netmods), namely OFI and UCX:
    - For the OFI netmod, use: `conda install conda-forge::mvapich=*=ofi_*`
    - For the UCX netmod, use: `conda install conda-forge::mvapich=*=ucx_*`

    These commands will install the MVAPICH package configured with the desired netmod.

    ### About the Compilers
    Note that the actual GNU compilers (i.e., `gcc_linux-64`, `gfortran_linux-64` and `gxx_linux-64` for `linux-64`, or
    their equivalent for other platforms) have to be added manually since they are not automatically installed in the Conda
    environment as dependencies.
    
extra:
  recipe-maintainers:
    - j34ni
